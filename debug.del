String DEBUG_MODE_CATEGORY: "99. DEBUG MODE";
globalvar Boolean DEBUG_MODE = WorkshopSettingToggle(DEBUG_MODE_CATEGORY, "DEBUG MODE ENABLED", false, -100);

import "lib/OSTWUtils/Diagnostics.del";
rule: "Create DEBUG huds"
if (DEBUG_MODE)
{
  new Diagnostics(
    VisibleToHostOnly:      true,
    ShowServerLoad:         true,
    ShowServerLoadPeak:     true,
    ShowEntityCount:        true,
    ShowTextCount:          true,
    PlayMoreEffectsEnabled: true,
  );
  WaitForeverUntil(IsGameInProgress());
  LogToInspector($"Effect Count: {EntityCount()}");
}

disabled rule: "[debug.del] When host player melees in debug mode, issue an order to advance game state"
if (DEBUG_MODE)
if (HostPlayer().IsButtonHeld(Button.Melee))
{
  switch (currentGameState) {
    case GameState.SELECTING_HEROES:
      GSM_Trigger(GameStateAction.SELECTING_HEROES_COMPLETE);
      break;
    case GameState.GAMEPLAY:
      GSM_Trigger(GameStateAction.TEAM_LSF_WIN);
      break;
    case GameState.CONCLUSION:
      GSM_Trigger(GameStateAction.CONCLUSION_COMPLETE);
      break;
  }
  Wait(0.064);
}

rule: "[debug.del] melee to jump to end"
if (DEBUG_MODE)
if (HostPlayer().IsButtonHeld(Button.Melee))
{
  GSM_Trigger(GameStateAction.TEAM_LSF_WIN);
}

rule: "[debug.del] Reduce match time in assembling heroes"
if (DEBUG_MODE)
if (IsAssemblingHeroes())
{
  SetMatchTime(5);
  WaitForeverUntil(IsGameInProgress());
  Wait(0.25);
  if (WorkshopSettingToggle(DEBUG_MODE_CATEGORY, "Indefinite Match", false)) PauseMatchTime();
}

rule: "[debug.del] Give ult faster"
Event.OngoingPlayer
if (DEBUG_MODE)
if (HasSpawned())
if (UltimateChargePercent() < 100)
{
  SetUltimateCharge(EventPlayer(), 100);
  Wait(0.25);
  LoopIfConditionIsTrue();
}
