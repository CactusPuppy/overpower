Number SWITCH_RADIUS: 0.5;
Boolean IsPlayerHoveringSwitch(Player p = EventPlayer()): DoesLineIntersectSphere(p.EyePosition(), p.FacingDirection(), CurrentInteractionPoint(p).location, SWITCH_RADIUS);
Number NUM_SWITCHES: switchLocations.Length;
globalvar Number switchesFlipped;


void HandleSwitchInteract() {
  AbortIf(CurrentInteractionPoint().GetDataValue("activated"));
  AbortIf(!IsPlayerHoveringSwitch());
  CurrentInteractionPoint().SetDataValue("activated", true);
  PlayEffect(AllPlayers(), PlayEffect.SombraTranslocatorDisappearSound, null, CurrentInteractionPoint().location, 100);
  ModifyTeamScore(Team.Team1, 1);
  switchesFlipped += 1;
}

rule: "[interaction/types/switch.del] Initialize switches"
{
  for (i = 0; switchLocations.Length; 1) {
    NewInteractionPoint(switchLocations[i], InteractableType.SWITCH);
    // if (DEBUG_MODE && RandomReal(0, 1) < 0.5) {
    //   interactionPoints.Last.SetDataValue("activated", true);
    //   switchesFlipped += 1;
    // }
  }
}

String EMPTY_SQUARES: '□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□';
String FILLED_SQUARES: '■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■';

rule: '[interaction/types/switch.del] prompt player to press interact to flip the switch'
{
  CreateInWorldText(
    VisibleTo: LocalPlayer().Team() == Team.Team1
      && CurrentInteractionPoint(LocalPlayer()).type == InteractableType.SWITCH
      && IsPlayerHoveringSwitch(LocalPlayer())
      && !CurrentInteractionPoint(LocalPlayer()).GetDataValue("activated")
        ? LocalPlayer() : null,
    Header: <"<1> <2> <0>", InputBindingString(Button.Interact), IconString(Icon.Bolt), GameMode.Push>,
    Position: CurrentInteractionPoint(LocalPlayer()).location,
    Scale: 2,
    Clipping: Clipping.DoNotClip,
    Reevaluation: InworldTextRev.VisibleToPositionAndString,
    Spectators: Spectators.VisibleNever
  );
}

rule: "[interaction/types/switch.del] Show switch progress"
{
  CreateHudText(
    VisibleTo: AllPlayers(),
    Text: <"<0> <1><3>fg636363FF> / <2><4>", IconString(Icon.Bolt), Math.Clamp(switchesFlipped, 0, NEEDED_SWITCHES), NEEDED_SWITCHES, z, MANY_SPACES>,
    Subheader: $"{StringSlice(FILLED_SQUARES, 0, Math.Clamp(switchesFlipped, 0, NEEDED_SWITCHES))}{z}fg636363FF>{StringSlice(EMPTY_SQUARES, 0, Math.Clamp(NEEDED_SWITCHES - switchesFlipped, 0, NEEDED_SWITCHES))}",
    SubheaderColor: switchesFlipped >= NEEDED_SWITCHES ? Color.Green : Colors.StepGradient([Color.Red, Color.Orange, Color.Yellow, Color.LimeGreen], switchesFlipped / NEEDED_SWITCHES),
    TextColor: Color.White,
    Location: Location.Left,
    SortOrder: 1,
    Reevaluation: HudTextRev.VisibleToStringAndColor
  );
}

import "../../lib/OSTWUtils/String.del";
