enum GameState {
  NONE = "NONE",
  INTRO = "INTRO",
  SELECTING_HEROES = "SELECTING_HEROES",
  GAMEPLAY = "GAMEPLAY",
  CONCLUSION = "CONCLUSION"
}

globalvar GameState currentGameState = GameState.NONE;
globalvar GameStateAction gameStateAction;
globalvar Team winningTeam;

// =========== REACTIVE GAME LOGIC ===========

rule: "[gameFlow.del] When game first boots, perform gamemode setup and move to selecting heroes phase"
if (currentGameState == GameState.NONE)
{
  WaitUntil(
    ContinueCondition: CountOf(AllPlayers(Team.Team1)) > 0
      && (CountOf(AllPlayers(Team.Team2)) > 0 || DEBUG_MODE),
    Timeout: 10);
  GSM_Trigger(GameStateAction.INIT_SETUP_COMPLETE);
}

rule: "[gameFlow.del] Handle when assembling heroes starts and ends"
if (IsAssemblingHeroes())
{
  async KeepClientsUpdated();
  WaitUntil(!IsAssemblingHeroes(), 60);
  GSM_Trigger(GameStateAction.SELECTING_HEROES_COMPLETE);
}

void KeepClientsUpdated() "[gameFlow.del | SUB] Keep clients from desyncing" {
  while (IsAssemblingHeroes()) {
    Wait(0.192);
    SetMatchTime(MatchTime());
  }
}

disabled rule: "[gameFlow.del] End match after victory poses"
if (IsMatchComplete())
{
  Wait(8.5);
  ReturnToLobby();
}

rule: "[gameFlow.del] When all objectives complete, grant win to Team LSF"
if (switchesFlipped >= NUM_SWITCHES * NEEDED_SWITCHES_RATIO)
if (batteriesDelivered >= NUM_BATTERIES * NEEDED_BATTERIES_RATIO)
if (currentGameState == GameState.GAMEPLAY)
{
  GSM_Trigger(GameStateAction.TEAM_LSF_WIN);
}

rule: '[gameFlow.del] when time runs out, grant win to Team Talon'
if (currentGameState == GameState.GAMEPLAY)
if (MatchTime() == 0)
{
  GSM_Trigger(GameStateAction.TEAM_TALON_WIN);
}


// =========== STATE MACHINE ==============
enum GameStateAction {
  NONE = "NONE",
  INIT_SETUP_COMPLETE = "INIT_SETUP_COMPLETE",
  INTRO_COMPLETE = "INTRO_COMPLETE",
  SELECTING_HEROES_COMPLETE = "SELECTING_HEROES_COMPLETE",
  TEAM_LSF_WIN = "TEAM_LSF_WIN",
  TEAM_TALON_WIN = "TEAM_TALON_WIN",
  CONCLUSION_COMPLETE = "CONCLUSION_COMPLETE"
}

void GSM_Trigger(in GameStateAction action) {
  gameStateAction = action;
  GameStateMachine();
}

void GameStateMachine() "[gameFlow.del | SUB] advance game state"
{
  LogToInspector($"GSM_Enter: GameState {currentGameState} | Action: {gameStateAction}");
  switch (currentGameState) {
    case GameState.NONE:
      GSM_GS_NONE();
      break;
    case GameState.SELECTING_HEROES:
      GSM_GS_SELECT_HERO();
      break;
    case GameState.GAMEPLAY:
      GSM_GS_GAMEPLAY();
      break;
    case GameState.CONCLUSION:
      GSM_GS_CONCLUSION();
      break;
  }
  LogToInspector($"GSM_Exit: GameState {currentGameState} | Action: {gameStateAction}");
}

void GSM_GS_NONE() {
  switch (gameStateAction) {
    case GameStateAction.INIT_SETUP_COMPLETE:
      currentGameState = GameState.SELECTING_HEROES;
      break;
  }
}

void GSM_GS_SELECT_HERO() {
  switch (gameStateAction) {
    case GameStateAction.SELECTING_HEROES_COMPLETE:
      currentGameState = GameState.GAMEPLAY;
      break;
  }
}

void GSM_GS_GAMEPLAY() {
  switch (gameStateAction) {
    case GameStateAction.TEAM_LSF_WIN:
      SetSlowMotion(30);
      PauseMatchTime();
      AllPlayers().hasLimitedVision = false;
      PlayEffect(LocalPlayer(), PlayEffect.SombraEmpExplosionSound, Team.Team1, LocalPlayer(), 200);
      winningTeam = Team.Team1;
      currentGameState = GameState.CONCLUSION;
      break;
    case GameStateAction.TEAM_TALON_WIN:
      SetSlowMotion(30);
      winningTeam = Team.Team2;
      currentGameState = GameState.CONCLUSION;
      break;
  }
}

void GSM_GS_CONCLUSION() {
  if (gameStateAction == GameStateAction.CONCLUSION_COMPLETE) {
    if (winningTeam == null) {
      LogToInspector("[PANIC] Conclusion ended without a winning team declared!");
      DeclareMatchDraw();
      return;
    }
    DeclareTeamVictory(winningTeam);
  }
}
