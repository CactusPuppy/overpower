enum GameState {
  NONE = "NONE",
  SELECTING_HEROES = "SELECTING_HEROES",
  GAMEPLAY = "GAMEPLAY",
  CONCLUSION = "CONCLUSION"
}

globalvar GameState currentGameState = GameState.NONE;
globalvar GameStateAction gameStateAction;
globalvar Team winningTeam;

rule: "When game first boots, perform gamemode setup and move to intro phase"
if (currentGameState == GameState.NONE)
{
  WaitUntil(
    ContinueCondition: CountOf(AllPlayers(Team.Team1)) > 0
      && (CountOf(AllPlayers(Team.Team2)) > 0 || DEBUG_MODE)
      && AllPlayers().IsTrueForAll(p => HasSpawned(p)),
    Timeout: 10);
  GSM_Trigger(GameStateAction.INIT_SETUP_COMPLETE);
}

rule: "Handle when assembling heroes starts and ends"
if (IsAssemblingHeroes())
{
  WaitUntil(!IsAssemblingHeroes(), 60);
  GSM_Trigger(GameStateAction.SELECTING_HEROES_COMPLETE);
}

rule: "End match after victory poses"
if (IsMatchComplete())
{
  Wait(8.5);
  ReturnToLobby();
}

// =========== REACTIVE GAME LOGIC ===========

rule: 'when gameplay in progress, alter objective description'
if (currentGameState == GameState.GAMEPLAY)
{
  SetObjectiveDescription(
    VisibleTo:        AllPlayers(),
    // Header:             <"Showtime In: <0>:<1>",
    //                     RoundToInteger(MatchTime() / 60, Rounding.Down),
    //                     RoundToInteger(MatchTime() % 60, Rounding.Down) > 9
    //                       ? RoundToInteger(MatchTime() % 60, Rounding.Down)
    //                       : <"0<0>", RoundToInteger(MatchTime() % 60, Rounding.Down)>>,
    Header:             "Showtime In",
    Reevaluation:     HudTextRev.VisibleToAndString
  );
}

rule: 'when time runs out, grant win to Team Talon'
if (currentGameState == GameState.GAMEPLAY)
if (MatchTime() == 0)
if (winningTeam != null)
{
  GSM_Trigger(GameStateAction.TEAM_TALON_WIN);
}


// =========== STATE MACHINE ==============
enum GameStateAction {
  NONE = "NONE",
  INIT_SETUP_COMPLETE = "INIT_SETUP_COMPLETE",
  INTRO_COMPLETE = "INTRO_COMPLETE",
  SELECTING_HEROES_COMPLETE = "SELECTING_HEROES_COMPLETE",
  TEAM_LSF_WIN = "TEAM_LSF_WIN",
  TEAM_TALON_WIN = "TEAM_TALON_WIN",
  CONCLUSION_COMPLETE = "CONCLUSION_COMPLETE"
}

void GSM_Trigger(in GameStateAction action) {
  gameStateAction = action;
  GameStateMachine();
}

void GameStateMachine() "[gameFlow.del | SUB] advance game state"
{
  LogToInspector($"GSM_Enter: GameState {currentGameState} | Action: {gameStateAction}");
  switch (currentGameState) {
    case GameState.NONE:
      GSM_GS_NONE();
      break;
    case GameState.SELECTING_HEROES:
      GSM_GS_SELECT_HERO();
      break;
    case GameState.GAMEPLAY:
      GSM_GS_GAMEPLAY();
      break;
    case GameState.CONCLUSION:
      GSM_GS_CONCLUSION();
      break;
  }
  LogToInspector($"GSM_Exit: GameState {currentGameState} | Action: {gameStateAction}");
}

void GSM_GS_NONE() {
  switch (gameStateAction) {
    case GameStateAction.INIT_SETUP_COMPLETE:
      currentGameState = GameState.SELECTING_HEROES;
      break;
  }
}

void GSM_GS_SELECT_HERO() {
  switch (gameStateAction) {
    case GameStateAction.SELECTING_HEROES_COMPLETE:
      currentGameState = GameState.GAMEPLAY;
      break;
  }
}

void GSM_GS_GAMEPLAY() {
  switch (gameStateAction) {
    case GameStateAction.TEAM_LSF_WIN:
      winningTeam = Team.Team1;
      currentGameState = GameState.CONCLUSION;
      break;
    case GameStateAction.TEAM_TALON_WIN:
      winningTeam = Team.Team2;
      currentGameState = GameState.CONCLUSION;
      break;
  }
}

void GSM_GS_CONCLUSION() {
  switch (gameStateAction) {
    case GameStateAction.CONCLUSION_COMPLETE:
      if (!winningTeam) {
        LogToInspector("[PANIC] We somehow ended up at the end of the game without a victor? Declaring a match draw...");
        DeclareMatchDraw();
        return;
      }
      DeclareTeamVictory(winningTeam);
  }
}
